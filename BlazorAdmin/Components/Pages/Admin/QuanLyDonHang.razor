@page "/admin/hoadon"
@layout AdminLayout
@inject IHoaDonService hoaDonService
@inject IHoaDonChiTietService chiTietHoaDonService

@using Data.Models
<link href="css/HoaDon.css" rel="stylesheet" />

<h2 class="text-xl font-semibold mb-4">Quản lý đơn hàng</h2>

<div class="search-row">
    <input @bind="tuKhoa" @bind:event="oninput" placeholder="Tìm kiếm..." />
    <button @onclick="TaiLai">Tải lại</button>
</div>

<div class="tabs">
    @foreach (var status in trangThaiList)
    {
        <button class="@(trangThai == status ? "active" : "")" @onclick='() => LocTheoTrangThai(status)'>@status</button>
    }
</div>

<table class="table-auto w-full text-sm">
    <thead>
        <tr class="bg-gray-100">
            <th class="p-2">#</th>
            <th class="p-2">Mã đơn</th>
            <th class="p-2">Tổng SP</th>
            <th class="p-2">Tổng tiền</th>
            <th class="p-2">Khách hàng</th>
            <th class="p-2">Ngày tạo</th>
            <th class="p-2">Loại</th>
            <th class="p-2">Trạng thái</th>
        </tr>
    </thead>
    <tbody>
        @if (dsHoaDon != null)
        {
            var index = 1;
            foreach (var hd in dsHoaDon)
            {
                var tongSP = chiTietMap.GetValueOrDefault(hd.HoaDonId)?.Sum(c => c.SoLuongSanPham) ?? 0;
                var tongTien = chiTietMap.GetValueOrDefault(hd.HoaDonId)?.Sum(c => c.SoLuongSanPham * c.Gia) ?? 0m;
                <tr class="border-b">
                    <td class="p-2">@index</td>
                    <td class="p-2">@hd.HoaDonId.ToString().Substring(0, 8)</td>
                    <td class="p-2">@tongSP</td>
                    <td class="p-2">@tongTien.ToString("N0") đ</td>
@*                     <td class="p-2">@(string.IsNullOrEmpty(hd.TenCuaKhachHang) ? "Khách lẻ" : hd.TenCuaKhachHang)</td>
 *@                    <td class="p-2">@hd.NgayTao.ToString("dd/MM/yyyy HH:mm")</td>
                    <td class="p-2">@hd.hinhThucThanhToan?.TenHinhThuc</td>
                    <td class="p-2">
                        <span class="badge @(GetBadgeClass(hd.TrangThai))">@hd.TrangThai</span>
                    </td>
                </tr>
                index++;
            }
        }
        else
        {
            <tr>
                <td colspan="8" class="text-center text-gray-500 p-4">Chưa có dữ liệu</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<HoaDon> dsHoaDon;
    private List<HoaDonChiTiet> dsChiTiet;
    private Dictionary<Guid, List<HoaDonChiTiet>> chiTietMap = new();
    private string tuKhoa;
    private string trangThai;
    private List<string> trangThaiList = new() { "TẤT CẢ", "Chờ xác nhận", "Chờ giao", "Vận chuyển", "Đã giao", "Đã thanh toán", "Đã huỷ", "Hoàn thành" };

    protected override async Task OnInitializedAsync() => await TaiLai();

    private async Task TaiLai()
    {
        var all = await hoaDonService.GetAll();
        dsChiTiet = await chiTietHoaDonService.GetAllAsync();

        chiTietMap = dsChiTiet.GroupBy(x => x.HoaDonId).ToDictionary(g => g.Key, g => g.ToList());

        dsHoaDon = all?.Where(hd => string.IsNullOrEmpty(tuKhoa) /*||  hd.TenCuaKhachHang?.Contains(tuKhoa, StringComparison.OrdinalIgnoreCase) == true */).ToList();
        if (!string.IsNullOrEmpty(trangThai) && trangThai != "TẤT CẢ")
            dsHoaDon = dsHoaDon.Where(h => h.TrangThai == trangThai).ToList();
    }

    private async Task LocTheoTrangThai(string tt)
    {
        trangThai = tt;
        await TaiLai();
    }

    private string GetBadgeClass(string status) => status switch
    {
        "Hoàn thành" => "badge-purple",
        "Chờ xác nhận" => "badge-blue",
        "Chờ giao" => "badge-orange",
        "Vận chuyển" => "badge-blue",
        "Đã giao" => "badge-green",
        "Đã thanh toán" => "badge-green",
        "Đã huỷ" => "badge-red",
        _ => "badge-gray"
    };
}

